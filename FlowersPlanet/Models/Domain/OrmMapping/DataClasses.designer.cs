#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlowersPlanet.Models.Domain
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FlowersPlanet")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertFlowerInTag(FlowerInTag instance);
    partial void UpdateFlowerInTag(FlowerInTag instance);
    partial void DeleteFlowerInTag(FlowerInTag instance);
    partial void InsertFlower(Flower instance);
    partial void UpdateFlower(Flower instance);
    partial void DeleteFlower(Flower instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FlowersPlanetConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menus
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<FlowerInTag> FlowerInTags
		{
			get
			{
				return this.GetTable<FlowerInTag>();
			}
		}
		
		public System.Data.Linq.Table<Flower> Flowers
		{
			get
			{
				return this.GetTable<Flower>();
			}
		}
	}
	
	[Table(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Url;
		
		private int _IdMenu;
		
		private string _MetaDesc;
		
		private string _MetaTitle;
		
		private string _MetaKeys;
		
		private string _Article;
		
		private EntitySet<FlowerInTag> _FlowerInTags;
		
		private EntityRef<Menu> _Menu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnIdMenuChanging(int value);
    partial void OnIdMenuChanged();
    partial void OnMetaDescChanging(string value);
    partial void OnMetaDescChanged();
    partial void OnMetaTitleChanging(string value);
    partial void OnMetaTitleChanged();
    partial void OnMetaKeysChanging(string value);
    partial void OnMetaKeysChanged();
    partial void OnArticleChanging(string value);
    partial void OnArticleChanged();
    #endregion
		
		public Tag()
		{
			this._FlowerInTags = new EntitySet<FlowerInTag>(new Action<FlowerInTag>(this.attach_FlowerInTags), new Action<FlowerInTag>(this.detach_FlowerInTags));
			this._Menu = default(EntityRef<Menu>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IdMenu", DbType="Int NOT NULL")]
		public int IdMenu
		{
			get
			{
				return this._IdMenu;
			}
			set
			{
				if ((this._IdMenu != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMenuChanging(value);
					this.SendPropertyChanging();
					this._IdMenu = value;
					this.SendPropertyChanged("IdMenu");
					this.OnIdMenuChanged();
				}
			}
		}
		
		[Column(Storage="_MetaDesc", DbType="NVarChar(MAX)")]
		public string MetaDesc
		{
			get
			{
				return this._MetaDesc;
			}
			set
			{
				if ((this._MetaDesc != value))
				{
					this.OnMetaDescChanging(value);
					this.SendPropertyChanging();
					this._MetaDesc = value;
					this.SendPropertyChanged("MetaDesc");
					this.OnMetaDescChanged();
				}
			}
		}
		
		[Column(Storage="_MetaTitle", DbType="NVarChar(200)")]
		public string MetaTitle
		{
			get
			{
				return this._MetaTitle;
			}
			set
			{
				if ((this._MetaTitle != value))
				{
					this.OnMetaTitleChanging(value);
					this.SendPropertyChanging();
					this._MetaTitle = value;
					this.SendPropertyChanged("MetaTitle");
					this.OnMetaTitleChanged();
				}
			}
		}
		
		[Column(Storage="_MetaKeys", DbType="NVarChar(MAX)")]
		public string MetaKeys
		{
			get
			{
				return this._MetaKeys;
			}
			set
			{
				if ((this._MetaKeys != value))
				{
					this.OnMetaKeysChanging(value);
					this.SendPropertyChanging();
					this._MetaKeys = value;
					this.SendPropertyChanged("MetaKeys");
					this.OnMetaKeysChanged();
				}
			}
		}
		
		[Column(Storage="_Article", DbType="NVarChar(MAX)")]
		public string Article
		{
			get
			{
				return this._Article;
			}
			set
			{
				if ((this._Article != value))
				{
					this.OnArticleChanging(value);
					this.SendPropertyChanging();
					this._Article = value;
					this.SendPropertyChanged("Article");
					this.OnArticleChanged();
				}
			}
		}
		
		[Association(Name="Tag_FlowerInTag", Storage="_FlowerInTags", ThisKey="Id", OtherKey="IdTag")]
		public EntitySet<FlowerInTag> FlowerInTags
		{
			get
			{
				return this._FlowerInTags;
			}
			set
			{
				this._FlowerInTags.Assign(value);
			}
		}
		
		[Association(Name="Menu_Tag", Storage="_Menu", ThisKey="IdMenu", OtherKey="Id", IsForeignKey=true)]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._IdMenu = value.Id;
					}
					else
					{
						this._IdMenu = default(int);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlowerInTags(FlowerInTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_FlowerInTags(FlowerInTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[Table(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Url;
		
		private string _MetaDesc;
		
		private string _MetaTitle;
		
		private string _MetaKeys;
		
		private string _Article;
		
		private EntitySet<Tag> _Tags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnMetaDescChanging(string value);
    partial void OnMetaDescChanged();
    partial void OnMetaTitleChanging(string value);
    partial void OnMetaTitleChanged();
    partial void OnMetaKeysChanging(string value);
    partial void OnMetaKeysChanged();
    partial void OnArticleChanging(string value);
    partial void OnArticleChanged();
    #endregion
		
		public Menu()
		{
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_MetaDesc", DbType="NVarChar(MAX)")]
		public string MetaDesc
		{
			get
			{
				return this._MetaDesc;
			}
			set
			{
				if ((this._MetaDesc != value))
				{
					this.OnMetaDescChanging(value);
					this.SendPropertyChanging();
					this._MetaDesc = value;
					this.SendPropertyChanged("MetaDesc");
					this.OnMetaDescChanged();
				}
			}
		}
		
		[Column(Storage="_MetaTitle", DbType="NVarChar(200)")]
		public string MetaTitle
		{
			get
			{
				return this._MetaTitle;
			}
			set
			{
				if ((this._MetaTitle != value))
				{
					this.OnMetaTitleChanging(value);
					this.SendPropertyChanging();
					this._MetaTitle = value;
					this.SendPropertyChanged("MetaTitle");
					this.OnMetaTitleChanged();
				}
			}
		}
		
		[Column(Storage="_MetaKeys", DbType="NVarChar(MAX)")]
		public string MetaKeys
		{
			get
			{
				return this._MetaKeys;
			}
			set
			{
				if ((this._MetaKeys != value))
				{
					this.OnMetaKeysChanging(value);
					this.SendPropertyChanging();
					this._MetaKeys = value;
					this.SendPropertyChanged("MetaKeys");
					this.OnMetaKeysChanged();
				}
			}
		}
		
		[Column(Storage="_Article", DbType="NVarChar(MAX)")]
		public string Article
		{
			get
			{
				return this._Article;
			}
			set
			{
				if ((this._Article != value))
				{
					this.OnArticleChanging(value);
					this.SendPropertyChanging();
					this._Article = value;
					this.SendPropertyChanged("Article");
					this.OnArticleChanged();
				}
			}
		}
		
		[Association(Name="Menu_Tag", Storage="_Tags", ThisKey="Id", OtherKey="IdMenu")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
	}
	
	[Table(Name="dbo.FlowerInTag")]
	public partial class FlowerInTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTag;
		
		private int _IdFlower;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<Flower> _Flower;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTagChanging(int value);
    partial void OnIdTagChanged();
    partial void OnIdFlowerChanging(int value);
    partial void OnIdFlowerChanged();
    #endregion
		
		public FlowerInTag()
		{
			this._Tag = default(EntityRef<Tag>);
			this._Flower = default(EntityRef<Flower>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTag", DbType="Int NOT NULL")]
		public int IdTag
		{
			get
			{
				return this._IdTag;
			}
			set
			{
				if ((this._IdTag != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTagChanging(value);
					this.SendPropertyChanging();
					this._IdTag = value;
					this.SendPropertyChanged("IdTag");
					this.OnIdTagChanged();
				}
			}
		}
		
		[Column(Storage="_IdFlower", DbType="Int NOT NULL")]
		public int IdFlower
		{
			get
			{
				return this._IdFlower;
			}
			set
			{
				if ((this._IdFlower != value))
				{
					if (this._Flower.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdFlowerChanging(value);
					this.SendPropertyChanging();
					this._IdFlower = value;
					this.SendPropertyChanged("IdFlower");
					this.OnIdFlowerChanged();
				}
			}
		}
		
		[Association(Name="Tag_FlowerInTag", Storage="_Tag", ThisKey="IdTag", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.FlowerInTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.FlowerInTags.Add(this);
						this._IdTag = value.Id;
					}
					else
					{
						this._IdTag = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[Association(Name="Flower_FlowerInTag", Storage="_Flower", ThisKey="IdFlower", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Flower Flower
		{
			get
			{
				return this._Flower.Entity;
			}
			set
			{
				Flower previousValue = this._Flower.Entity;
				if (((previousValue != value) 
							|| (this._Flower.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flower.Entity = null;
						previousValue.FlowerInTags.Remove(this);
					}
					this._Flower.Entity = value;
					if ((value != null))
					{
						value.FlowerInTags.Add(this);
						this._IdFlower = value.Id;
					}
					else
					{
						this._IdFlower = default(int);
					}
					this.SendPropertyChanged("Flower");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Flower")]
	public partial class Flower : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private double _Price;
		
		private int _Discount;
		
		private string _Description;
		
		private string _Article;
		
		private string _Url;
		
		private string _MetaDesc;
		
		private string _MetaTitle;
		
		private System.Data.Linq.Binary _Photo;
		
		private string _MetaKeys;
		
		private int _OrderIndex;
		
		private EntitySet<FlowerInTag> _FlowerInTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnDiscountChanging(int value);
    partial void OnDiscountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnArticleChanging(string value);
    partial void OnArticleChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnMetaDescChanging(string value);
    partial void OnMetaDescChanged();
    partial void OnMetaTitleChanging(string value);
    partial void OnMetaTitleChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnMetaKeysChanging(string value);
    partial void OnMetaKeysChanged();
    partial void OnOrderIndexChanging(int value);
    partial void OnOrderIndexChanged();
    #endregion
		
		public Flower()
		{
			this._FlowerInTags = new EntitySet<FlowerInTag>(new Action<FlowerInTag>(this.attach_FlowerInTags), new Action<FlowerInTag>(this.detach_FlowerInTags));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Int NOT NULL")]
		public int Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Article", DbType="NVarChar(MAX)")]
		public string Article
		{
			get
			{
				return this._Article;
			}
			set
			{
				if ((this._Article != value))
				{
					this.OnArticleChanging(value);
					this.SendPropertyChanging();
					this._Article = value;
					this.SendPropertyChanged("Article");
					this.OnArticleChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_MetaDesc", DbType="NVarChar(MAX)")]
		public string MetaDesc
		{
			get
			{
				return this._MetaDesc;
			}
			set
			{
				if ((this._MetaDesc != value))
				{
					this.OnMetaDescChanging(value);
					this.SendPropertyChanging();
					this._MetaDesc = value;
					this.SendPropertyChanged("MetaDesc");
					this.OnMetaDescChanged();
				}
			}
		}
		
		[Column(Storage="_MetaTitle", DbType="NVarChar(200)")]
		public string MetaTitle
		{
			get
			{
				return this._MetaTitle;
			}
			set
			{
				if ((this._MetaTitle != value))
				{
					this.OnMetaTitleChanging(value);
					this.SendPropertyChanging();
					this._MetaTitle = value;
					this.SendPropertyChanged("MetaTitle");
					this.OnMetaTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_MetaKeys", DbType="NVarChar(MAX)")]
		public string MetaKeys
		{
			get
			{
				return this._MetaKeys;
			}
			set
			{
				if ((this._MetaKeys != value))
				{
					this.OnMetaKeysChanging(value);
					this.SendPropertyChanging();
					this._MetaKeys = value;
					this.SendPropertyChanged("MetaKeys");
					this.OnMetaKeysChanged();
				}
			}
		}
		
		[Column(Storage="_OrderIndex", DbType="Int NOT NULL")]
		public int OrderIndex
		{
			get
			{
				return this._OrderIndex;
			}
			set
			{
				if ((this._OrderIndex != value))
				{
					this.OnOrderIndexChanging(value);
					this.SendPropertyChanging();
					this._OrderIndex = value;
					this.SendPropertyChanged("OrderIndex");
					this.OnOrderIndexChanged();
				}
			}
		}
		
		[Association(Name="Flower_FlowerInTag", Storage="_FlowerInTags", ThisKey="Id", OtherKey="IdFlower")]
		public EntitySet<FlowerInTag> FlowerInTags
		{
			get
			{
				return this._FlowerInTags;
			}
			set
			{
				this._FlowerInTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlowerInTags(FlowerInTag entity)
		{
			this.SendPropertyChanging();
			entity.Flower = this;
		}
		
		private void detach_FlowerInTags(FlowerInTag entity)
		{
			this.SendPropertyChanging();
			entity.Flower = null;
		}
	}
}
#pragma warning restore 1591
